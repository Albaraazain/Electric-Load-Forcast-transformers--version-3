{
    "sourceFile": "data_loading/base/interval_types.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733130006204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733130006204,
            "name": "Commit-0",
            "content": "# data_loading/base/interval_types.py\r\nfrom enum import Enum\r\nfrom dataclasses import dataclass\r\nfrom typing import Dict, Any\r\n\r\nclass TimeInterval(Enum):\r\n    \"\"\"Supported time intervals for prediction.\"\"\"\r\n    FIFTEEN_MIN = 15\r\n    HOURLY = 60\r\n    DAILY = 1440  # minutes in a day\r\n    MONTHLY = 43200  # minutes in a month (approx)\r\n\r\n    def get_points_per_hour(self) -> int:\r\n        \"\"\"Get number of data points per hour for this interval.\"\"\"\r\n        return 60 // self.value if self.value <= 60 else 1//(self.value // 60)\r\n    \r\n    def get_points_per_day(self) -> int:\r\n        \"\"\"Get number of data points per day for this interval.\"\"\"\r\n        return 1440 // self.value\r\n        \r\n    def get_points_per_month(self) -> int:\r\n        \"\"\"Get number of data points per month for this interval.\"\"\"\r\n        return 43200 // self.value\r\n\r\n@dataclass\r\nclass IntervalConfig:\r\n    \"\"\"Configuration specific to time intervals.\"\"\"\r\n    interval_type: TimeInterval\r\n    lookback_periods: int  # Number of periods to look back\r\n    forecast_periods: int  # Number of periods to forecast\r\n    \r\n    def get_window_size(self) -> int:\r\n        \"\"\"Get total window size in data points.\"\"\"\r\n        if self.interval_type in {TimeInterval.FIFTEEN_MIN, TimeInterval.HOURLY}:\r\n            return self.lookback_periods * self.interval_type.get_points_per_hour()\r\n        elif self.interval_type == TimeInterval.DAILY:\r\n            return self.lookback_periods\r\n        else:  # MONTHLY\r\n            return self.lookback_periods\r\n\r\n    def get_horizon_size(self) -> int:\r\n        \"\"\"Get forecast horizon in data points.\"\"\"\r\n        if self.interval_type in {TimeInterval.FIFTEEN_MIN, TimeInterval.HOURLY}:\r\n            return self.forecast_periods * self.interval_type.get_points_per_hour()\r\n        elif self.interval_type == TimeInterval.DAILY:\r\n            return self.forecast_periods\r\n        else:  # MONTHLY\r\n            return self.forecast_periods"
        }
    ]
}