{
    "sourceFile": "evaluation/evaluator.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733003602145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733003602145,
            "name": "Commit-0",
            "content": "# evaluation/evaluator.py\r\nimport contextlib\r\nfrom typing import Optional, Tuple, List\r\nimport torch\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom torch import Tensor\r\nimport numpy as np\r\n\r\nfrom .metrics import Metrics, MetricConfig\r\nfrom .results import EvaluationResult, PredictionComparison\r\n\r\nclass Evaluator:\r\n    \"\"\"Evaluates model predictions against actual values.\"\"\"\r\n\r\n    def __init__(\r\n            self,\r\n            scaler: Optional[StandardScaler] = None,\r\n            metric_config: Optional[MetricConfig] = None\r\n    ):\r\n        self.scaler = scaler\r\n        self.metric_config = metric_config or MetricConfig()\r\n\r\n    def evaluate(\r\n            self,\r\n            predictions: Tensor,\r\n            targets: Tensor,\r\n            timestamps: np.ndarray,\r\n            num_variables: int = 1\r\n    ) -> EvaluationResult:\r\n        \"\"\"\r\n        Evaluate model predictions.\r\n\r\n        Args:\r\n            predictions: Model predictions\r\n            targets: Actual target values\r\n            timestamps: Timestamps for each prediction\r\n            num_variables: Number of target variables\r\n\r\n        Returns:\r\n            Evaluation results including metrics and comparisons\r\n        \"\"\"\r\n        # Unscale predictions if scaler is provided\r\n        pred_np, target_np = self._prepare_data(predictions, targets)\r\n\r\n        # Calculate overall metrics\r\n        total_metrics = Metrics.calculate_all_metrics(\r\n            torch.tensor(pred_np),\r\n            torch.tensor(target_np),\r\n            self.metric_config\r\n        )\r\n\r\n        # Calculate per-variable metrics if multiple variables\r\n        variable_metrics = {}\r\n        if num_variables > 1:\r\n            for i in range(num_variables):\r\n                variable_metrics[f'var_{i}'] = Metrics.calculate_all_metrics(\r\n                    torch.tensor(pred_np[:, i]),\r\n                    torch.tensor(target_np[:, i]),\r\n                    self.metric_config\r\n                )\r\n\r\n        # Create detailed comparisons\r\n        comparisons = self._create_comparisons(pred_np, target_np, timestamps)\r\n\r\n        return EvaluationResult(\r\n            total_metrics=total_metrics,\r\n            variable_metrics=variable_metrics,\r\n            comparisons=comparisons\r\n        )\r\n\r\n    def _prepare_data(\r\n            self,\r\n            predictions: Tensor,\r\n            targets: Tensor\r\n    ) -> Tuple[np.ndarray, np.ndarray]:\r\n        \"\"\"Prepare data for evaluation by unscaling if necessary.\"\"\"\r\n        # Convert to numpy and reshape if needed\r\n        pred_np = predictions.detach().cpu().numpy()\r\n        target_np = targets.detach().cpu().numpy()\r\n\r\n        # Reshape if more than 2 dimensions\r\n        if len(pred_np.shape) > 2:\r\n            pred_np = pred_np.reshape(-1, pred_np.shape[-1])\r\n            target_np = target_np.reshape(-1, target_np.shape[-1])\r\n\r\n        if self.scaler is not None:\r\n            with contextlib.suppress(Exception):\r\n                pred_np = self.scaler.inverse_transform(pred_np)\r\n                target_np = self.scaler.inverse_transform(target_np)\r\n        return pred_np, target_np\r\n\r\n    def _create_comparisons(\r\n            self,\r\n            predictions: np.ndarray,\r\n            targets: np.ndarray,\r\n            timestamps: np.ndarray\r\n    ) -> List[PredictionComparison]:\r\n        \"\"\"Create detailed comparisons for each timestamp.\"\"\"\r\n        return [\r\n            PredictionComparison(\r\n                timestamp=timestamp,\r\n                predicted=pred,\r\n                actual=target\r\n            )\r\n            for pred, target, timestamp in zip(predictions, targets, timestamps)\r\n        ]"
        }
    ]
}