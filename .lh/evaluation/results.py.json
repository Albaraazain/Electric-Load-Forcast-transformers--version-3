{
    "sourceFile": "evaluation/results.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733003424107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733003528393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+# evaluation/results.py\r\n+from dataclasses import dataclass, field\r\n+from typing import Dict, List, Optional\r\n+from datetime import datetime\r\n+import numpy as np\r\n+import pandas as pd\r\n+\r\n+@dataclass\r\n+class PredictionComparison:\r\n+    \"\"\"Stores prediction and actual values for a specific timestamp.\"\"\"\r\n+    timestamp: datetime\r\n+    predicted: np.ndarray\r\n+    actual: np.ndarray\r\n+\r\n+    def serialize(self) -> Dict:\r\n+        \"\"\"Serialize comparison data.\"\"\"\r\n+        # Convert numpy datetime64 to python datetime if needed\r\n+        ts = (pd.Timestamp(self.timestamp).to_pydatetime() \r\n+              if isinstance(self.timestamp, np.datetime64) \r\n+              else self.timestamp)\r\n+        return {\r\n+            'timestamp': ts.isoformat(),\r\n+            'predicted': self.predicted.tolist(),\r\n+            'actual': self.actual.tolist()\r\n+        }\r\n+\r\n+@dataclass\r\n+class EvaluationResult:\r\n+    \"\"\"Stores complete evaluation results.\"\"\"\r\n+\r\n+    # Overall metrics\r\n+    total_metrics: Dict[str, float]\r\n+\r\n+    # Per-variable metrics\r\n+    variable_metrics: Dict[str, Dict[str, float]]\r\n+\r\n+    # Detailed comparisons\r\n+    comparisons: List[PredictionComparison]\r\n+\r\n+    # Additional metadata\r\n+    timestamp: datetime = field(default_factory=datetime.now)\r\n+    metadata: Dict = field(default_factory=dict)\r\n+\r\n+    def serialize(self) -> Dict:\r\n+        \"\"\"Serialize evaluation results.\"\"\"\r\n+        return {\r\n+            'timestamp': self.timestamp.isoformat(),\r\n+            'total_metrics': self.total_metrics,\r\n+            'variable_metrics': self.variable_metrics,\r\n+            'comparisons': [comp.serialize() for comp in self.comparisons],\r\n+            'metadata': self.metadata\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def from_dict(cls, data: Dict) -> 'EvaluationResult':\r\n+        \"\"\"Create EvaluationResult from serialized data.\"\"\"\r\n+        return cls(\r\n+            total_metrics=data['total_metrics'],\r\n+            variable_metrics=data['variable_metrics'],\r\n+            comparisons=[\r\n+                PredictionComparison(\r\n+                    timestamp=datetime.fromisoformat(comp['timestamp']),\r\n+                    predicted=np.array(comp['predicted']),\r\n+                    actual=np.array(comp['actual'])\r\n+                )\r\n+                for comp in data['comparisons']\r\n+            ],\r\n+            timestamp=datetime.fromisoformat(data['timestamp']),\r\n+            metadata=data.get('metadata', {})\r\n+        )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733005035550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# evaluation/results.py\r\n+from dataclasses import dataclass, field\r\n+from typing import Dict, List, Optional\r\n+from datetime import datetime\r\n+import numpy as np\r\n+import pandas as pd\r\n+\r\n+@dataclass\r\n+class PredictionComparison:\r\n+    \"\"\"Stores prediction and actual values for a specific timestamp.\"\"\"\r\n+    timestamp: datetime\r\n+    predicted: np.ndarray\r\n+    actual: np.ndarray\r\n+\r\n+    def serialize(self) -> Dict:\r\n+        \"\"\"Serialize comparison data.\"\"\"\r\n+        # Handle different timestamp types\r\n+        if isinstance(self.timestamp, (np.int32, np.int64)):\r\n+            # Convert numpy integer to datetime using pandas\r\n+            ts = pd.Timestamp.fromtimestamp(self.timestamp)\r\n+        elif isinstance(self.timestamp, np.datetime64):\r\n+            ts = pd.Timestamp(self.timestamp).to_pydatetime()\r\n+        else:\r\n+            ts = self.timestamp\r\n+\r\n+        return {\r\n+            'timestamp': ts.isoformat(),\r\n+            'predicted': self.predicted.tolist(),\r\n+            'actual': self.actual.tolist()\r\n+        }\r\n+        \r\n+@dataclass\r\n+class EvaluationResult:\r\n+    \"\"\"Stores complete evaluation results.\"\"\"\r\n+\r\n+    # Overall metrics\r\n+    total_metrics: Dict[str, float]\r\n+\r\n+    # Per-variable metrics\r\n+    variable_metrics: Dict[str, Dict[str, float]]\r\n+\r\n+    # Detailed comparisons\r\n+    comparisons: List[PredictionComparison]\r\n+\r\n+    # Additional metadata\r\n+    timestamp: datetime = field(default_factory=datetime.now)\r\n+    metadata: Dict = field(default_factory=dict)\r\n+\r\n+    def serialize(self) -> Dict:\r\n+        \"\"\"Serialize evaluation results.\"\"\"\r\n+        return {\r\n+            'timestamp': self.timestamp.isoformat(),\r\n+            'total_metrics': self.total_metrics,\r\n+            'variable_metrics': self.variable_metrics,\r\n+            'comparisons': [comp.serialize() for comp in self.comparisons],\r\n+            'metadata': self.metadata\r\n+        }\r\n+\r\n+    @classmethod\r\n+    def from_dict(cls, data: Dict) -> 'EvaluationResult':\r\n+        \"\"\"Create EvaluationResult from serialized data.\"\"\"\r\n+        return cls(\r\n+            total_metrics=data['total_metrics'],\r\n+            variable_metrics=data['variable_metrics'],\r\n+            comparisons=[\r\n+                PredictionComparison(\r\n+                    timestamp=datetime.fromisoformat(comp['timestamp']),\r\n+                    predicted=np.array(comp['predicted']),\r\n+                    actual=np.array(comp['actual'])\r\n+                )\r\n+                for comp in data['comparisons']\r\n+            ],\r\n+            timestamp=datetime.fromisoformat(data['timestamp']),\r\n+            metadata=data.get('metadata', {})\r\n+        )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733005051087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n \r\n     def serialize(self) -> Dict:\r\n         \"\"\"Serialize comparison data.\"\"\"\r\n         # Handle different timestamp types\r\n-        if isinstance(self.timestamp, (np.int32, np.int64)):\r\n+        if isinstance(self.timestamp, (int, np.integer)):\r\n             # Convert numpy integer to datetime using pandas\r\n-            ts = pd.Timestamp.fromtimestamp(self.timestamp)\r\n+            ts = pd.Timestamp.fromtimestamp(float(self.timestamp))\r\n         elif isinstance(self.timestamp, np.datetime64):\r\n             ts = pd.Timestamp(self.timestamp).to_pydatetime()\r\n         else:\r\n             ts = self.timestamp\r\n@@ -71,144 +71,5 @@\n                 for comp in data['comparisons']\r\n             ],\r\n             timestamp=datetime.fromisoformat(data['timestamp']),\r\n             metadata=data.get('metadata', {})\r\n-        )\n-# evaluation/results.py\r\n-from dataclasses import dataclass, field\r\n-from typing import Dict, List, Optional\r\n-from datetime import datetime\r\n-import numpy as np\r\n-import pandas as pd\r\n-\r\n-@dataclass\r\n-class PredictionComparison:\r\n-    \"\"\"Stores prediction and actual values for a specific timestamp.\"\"\"\r\n-    timestamp: datetime\r\n-    predicted: np.ndarray\r\n-    actual: np.ndarray\r\n-\r\n-    def serialize(self) -> Dict:\r\n-        \"\"\"Serialize comparison data.\"\"\"\r\n-        # Convert numpy datetime64 to python datetime if needed\r\n-        ts = (pd.Timestamp(self.timestamp).to_pydatetime() \r\n-              if isinstance(self.timestamp, np.datetime64) \r\n-              else self.timestamp)\r\n-        return {\r\n-            'timestamp': ts.isoformat(),\r\n-            'predicted': self.predicted.tolist(),\r\n-            'actual': self.actual.tolist()\r\n-        }\r\n-\r\n-@dataclass\r\n-class EvaluationResult:\r\n-    \"\"\"Stores complete evaluation results.\"\"\"\r\n-\r\n-    # Overall metrics\r\n-    total_metrics: Dict[str, float]\r\n-\r\n-    # Per-variable metrics\r\n-    variable_metrics: Dict[str, Dict[str, float]]\r\n-\r\n-    # Detailed comparisons\r\n-    comparisons: List[PredictionComparison]\r\n-\r\n-    # Additional metadata\r\n-    timestamp: datetime = field(default_factory=datetime.now)\r\n-    metadata: Dict = field(default_factory=dict)\r\n-\r\n-    def serialize(self) -> Dict:\r\n-        \"\"\"Serialize evaluation results.\"\"\"\r\n-        return {\r\n-            'timestamp': self.timestamp.isoformat(),\r\n-            'total_metrics': self.total_metrics,\r\n-            'variable_metrics': self.variable_metrics,\r\n-            'comparisons': [comp.serialize() for comp in self.comparisons],\r\n-            'metadata': self.metadata\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def from_dict(cls, data: Dict) -> 'EvaluationResult':\r\n-        \"\"\"Create EvaluationResult from serialized data.\"\"\"\r\n-        return cls(\r\n-            total_metrics=data['total_metrics'],\r\n-            variable_metrics=data['variable_metrics'],\r\n-            comparisons=[\r\n-                PredictionComparison(\r\n-                    timestamp=datetime.fromisoformat(comp['timestamp']),\r\n-                    predicted=np.array(comp['predicted']),\r\n-                    actual=np.array(comp['actual'])\r\n-                )\r\n-                for comp in data['comparisons']\r\n-            ],\r\n-            timestamp=datetime.fromisoformat(data['timestamp']),\r\n-            metadata=data.get('metadata', {})\r\n-        )\n-# evaluation/results.py\r\n-from dataclasses import dataclass, field\r\n-from typing import Dict, List, Optional\r\n-from datetime import datetime\r\n-import numpy as np\r\n-\r\n-@dataclass\r\n-class PredictionComparison:\r\n-    \"\"\"Stores prediction and actual values for a specific timestamp.\"\"\"\r\n-    timestamp: datetime\r\n-    predicted: np.ndarray\r\n-    actual: np.ndarray\r\n-\r\n-    def serialize(self) -> Dict:\r\n-        \"\"\"Serialize comparison data.\"\"\"\r\n-        # Convert numpy timestamp to datetime if needed\r\n-        ts = (self.timestamp.to_pydatetime() \r\n-              if hasattr(self.timestamp, 'to_pydatetime') \r\n-              else self.timestamp)\r\n-        return {\r\n-            'timestamp': ts.isoformat(),\r\n-            'predicted': self.predicted.tolist(),\r\n-            'actual': self.actual.tolist()\r\n-        }\r\n-\r\n-@dataclass\r\n-class EvaluationResult:\r\n-    \"\"\"Stores complete evaluation results.\"\"\"\r\n-\r\n-    # Overall metrics\r\n-    total_metrics: Dict[str, float]\r\n-\r\n-    # Per-variable metrics\r\n-    variable_metrics: Dict[str, Dict[str, float]]\r\n-\r\n-    # Detailed comparisons\r\n-    comparisons: List[PredictionComparison]\r\n-\r\n-    # Additional metadata\r\n-    timestamp: datetime = field(default_factory=datetime.now)\r\n-    metadata: Dict = field(default_factory=dict)\r\n-\r\n-    def serialize(self) -> Dict:\r\n-        \"\"\"Serialize evaluation results.\"\"\"\r\n-        return {\r\n-            'timestamp': self.timestamp.isoformat(),\r\n-            'total_metrics': self.total_metrics,\r\n-            'variable_metrics': self.variable_metrics,\r\n-            'comparisons': [comp.serialize() for comp in self.comparisons],\r\n-            'metadata': self.metadata\r\n-        }\r\n-\r\n-    @classmethod\r\n-    def from_dict(cls, data: Dict) -> 'EvaluationResult':\r\n-        \"\"\"Create EvaluationResult from serialized data.\"\"\"\r\n-        return cls(\r\n-            total_metrics=data['total_metrics'],\r\n-            variable_metrics=data['variable_metrics'],\r\n-            comparisons=[\r\n-                PredictionComparison(\r\n-                    timestamp=datetime.fromisoformat(comp['timestamp']),\r\n-                    predicted=np.array(comp['predicted']),\r\n-                    actual=np.array(comp['actual'])\r\n-                )\r\n-                for comp in data['comparisons']\r\n-            ],\r\n-            timestamp=datetime.fromisoformat(data['timestamp']),\r\n-            metadata=data.get('metadata', {})\r\n         )\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733003424107,
            "name": "Commit-0",
            "content": "# evaluation/results.py\r\nfrom dataclasses import dataclass, field\r\nfrom typing import Dict, List, Optional\r\nfrom datetime import datetime\r\nimport numpy as np\r\n\r\n@dataclass\r\nclass PredictionComparison:\r\n    \"\"\"Stores prediction and actual values for a specific timestamp.\"\"\"\r\n    timestamp: datetime\r\n    predicted: np.ndarray\r\n    actual: np.ndarray\r\n\r\n    def serialize(self) -> Dict:\r\n        \"\"\"Serialize comparison data.\"\"\"\r\n        # Convert numpy timestamp to datetime if needed\r\n        ts = (self.timestamp.to_pydatetime() \r\n              if hasattr(self.timestamp, 'to_pydatetime') \r\n              else self.timestamp)\r\n        return {\r\n            'timestamp': ts.isoformat(),\r\n            'predicted': self.predicted.tolist(),\r\n            'actual': self.actual.tolist()\r\n        }\r\n\r\n@dataclass\r\nclass EvaluationResult:\r\n    \"\"\"Stores complete evaluation results.\"\"\"\r\n\r\n    # Overall metrics\r\n    total_metrics: Dict[str, float]\r\n\r\n    # Per-variable metrics\r\n    variable_metrics: Dict[str, Dict[str, float]]\r\n\r\n    # Detailed comparisons\r\n    comparisons: List[PredictionComparison]\r\n\r\n    # Additional metadata\r\n    timestamp: datetime = field(default_factory=datetime.now)\r\n    metadata: Dict = field(default_factory=dict)\r\n\r\n    def serialize(self) -> Dict:\r\n        \"\"\"Serialize evaluation results.\"\"\"\r\n        return {\r\n            'timestamp': self.timestamp.isoformat(),\r\n            'total_metrics': self.total_metrics,\r\n            'variable_metrics': self.variable_metrics,\r\n            'comparisons': [comp.serialize() for comp in self.comparisons],\r\n            'metadata': self.metadata\r\n        }\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Dict) -> 'EvaluationResult':\r\n        \"\"\"Create EvaluationResult from serialized data.\"\"\"\r\n        return cls(\r\n            total_metrics=data['total_metrics'],\r\n            variable_metrics=data['variable_metrics'],\r\n            comparisons=[\r\n                PredictionComparison(\r\n                    timestamp=datetime.fromisoformat(comp['timestamp']),\r\n                    predicted=np.array(comp['predicted']),\r\n                    actual=np.array(comp['actual'])\r\n                )\r\n                for comp in data['comparisons']\r\n            ],\r\n            timestamp=datetime.fromisoformat(data['timestamp']),\r\n            metadata=data.get('metadata', {})\r\n        )"
        }
    ]
}