{
    "sourceFile": "experiments/time_series_experiment.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733246637592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733246637592,
            "name": "Commit-0",
            "content": "# experiments/time_series_experiment.py\r\nimport datetime\r\nimport json\r\nimport os\r\nfrom typing import Optional, Dict, Any\r\n\r\nfrom models.base.base_wrapper import BaseWrapper\r\nfrom training.reports.training_report import TrainingReport\r\nfrom evaluation.results import EvaluationResult  # Changed from Evaluation to EvaluationResult\r\n\r\nfrom .experiment import Experiment\r\n\r\nclass TimeSeriesExperiment(Experiment):\r\n    \"\"\"\r\n    Specialized experiment implementation for time series forecasting.\r\n    Extends base Experiment class with time series specific functionality.\r\n    \"\"\"\r\n\r\n    def __init__(\r\n            self,\r\n            model_wrapper: BaseWrapper,\r\n            evaluation: EvaluationResult,  # Changed from Evaluation to EvaluationResult\r\n            training_config,\r\n            training_report: Optional[TrainingReport],  # Made training_report optional\r\n            training_time: float,\r\n            test_time: float,\r\n            forecasting_horizon: Optional[int] = None,\r\n            time_series_window: Optional[int] = None\r\n    ):\r\n        super().__init__(\r\n            model_wrapper,\r\n            evaluation,\r\n            training_config,\r\n            training_report,\r\n            training_time,\r\n            test_time\r\n        )\r\n        self.forecasting_horizon = forecasting_horizon\r\n        self.time_series_window = time_series_window\r\n\r\n    def save_to_json_file(self) -> None:\r\n        \"\"\"\r\n        Extends base save functionality with time series specific metrics.\r\n        \"\"\"\r\n        date = datetime.datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S_%f\")\r\n        experiment_name = f\"{str(self.model_wrapper.model_type)}_{date}\"\r\n        print(experiment_name)\r\n\r\n        result = {\r\n            'experimentName': experiment_name,\r\n            'modelType': str(self.model_wrapper.model_type),\r\n            'modelWrapper': str(self.model_wrapper),\r\n            'trainingConfig': self.training_config.__dict__,\r\n            'trainingReport': self.training_report.serialize() if self.training_report else None,\r\n            'evaluation': self.evaluation.serialize(),\r\n            'training_time': self.training_time,\r\n            'test_time': self.test_time,\r\n            # Add time series specific information\r\n            'forecasting_horizon': self.forecasting_horizon,\r\n            'time_series_window': self.time_series_window\r\n        }\r\n\r\n        file_path = self._get_experiment_filepath(experiment_name)\r\n        self._save_json(file_path, result)\r\n\r\n    def _get_experiment_filepath(self, experiment_name: str) -> str:\r\n        \"\"\"Get the complete file path for the experiment.\"\"\"\r\n        return self._create_experiment_path(\r\n            self.EXPERIMENTS_DIRECTORY,\r\n            self.FINAL_EXPERIMENTS_DIRECTORY,\r\n            f\"{experiment_name}{self.JSON_FILE_ENDING}\"\r\n        )\r\n\r\n    def _save_json(self, filepath: str, data: Dict[str, Any]) -> None:\r\n        \"\"\"Save data as JSON file.\"\"\"\r\n        os.makedirs(os.path.dirname(filepath), exist_ok=True)\r\n        with open(filepath, 'w') as fp:\r\n            json.dump(data, fp, indent=4)\r\n\r\n    def _create_experiment_path(self, root_dir: str, subdir: str, filename: str) -> str:\r\n        \"\"\"Create complete experiment file path.\"\"\"\r\n        path = os.path.join(root_dir, subdir)\r\n        os.makedirs(path, exist_ok=True)\r\n        return os.path.join(path, filename)\r\n\r\n    @staticmethod\r\n    def load_from_file(filepath: str) -> 'TimeSeriesExperiment':\r\n        \"\"\"\r\n        Load a time series experiment from a JSON file.\r\n\r\n        Args:\r\n            filepath: Path to the experiment JSON file\r\n\r\n        Returns:\r\n            TimeSeriesExperiment instance\r\n        \"\"\"\r\n        with open(filepath, 'r') as fp:\r\n            data = json.load(fp)\r\n\r\n        training_report_data = data['trainingReport']\r\n        training_report = TrainingReport.deserialize(training_report_data) if training_report_data else None\r\n\r\n        return TimeSeriesExperiment(\r\n            model_wrapper=data['modelWrapper'],\r\n            evaluation=EvaluationResult.from_dict(data['evaluation']),  # Changed to use from_dict\r\n            training_config=data['trainingConfig'],\r\n            training_report=training_report,\r\n            training_time=data['training_time'],\r\n            test_time=data['test_time'],\r\n            forecasting_horizon=data.get('forecasting_horizon'),\r\n            time_series_window=data.get('time_series_window')\r\n        )\r\n\r\n    def __str__(self):\r\n        base_str = super().__str__()\r\n        ts_specific = (\r\n            f'Forecasting Horizon: {self.forecasting_horizon}\\n'\r\n            f'Time Series Window: {self.time_series_window}'\r\n        )\r\n        return f\"{base_str}\\n{ts_specific}\""
        }
    ]
}