{
    "sourceFile": "models/architectures/transformers/resolution_specific/__init__.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733172125177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733172155720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from .subhourly_transformer import SubhourlyTransformer\r\n from .hourly_transformer import HourlyTransformer\r\n from .daily_transformer import DailyTransformer\r\n from .monthly_transformer import MonthlyTransformer\r\n-from ....data_loading.base.interval_types import TimeInterval\r\n+from data_loading.types.interval_types import TimeInterval\r\n \r\n def get_transformer_for_resolution(resolution_minutes: int) -> type:\r\n     \"\"\"\r\n     Get appropriate transformer class for the given resolution.\r\n"
                }
            ],
            "date": 1733172125177,
            "name": "Commit-0",
            "content": "# models/architectures/transformers/resolution_specific/__init__.py\r\nfrom .base_resolution_transformer import BaseResolutionTransformer\r\nfrom .subhourly_transformer import SubhourlyTransformer\r\nfrom .hourly_transformer import HourlyTransformer\r\nfrom .daily_transformer import DailyTransformer\r\nfrom .monthly_transformer import MonthlyTransformer\r\nfrom ....data_loading.base.interval_types import TimeInterval\r\n\r\ndef get_transformer_for_resolution(resolution_minutes: int) -> type:\r\n    \"\"\"\r\n    Get appropriate transformer class for the given resolution.\r\n    \r\n    Args:\r\n        resolution_minutes: The desired forecast resolution in minutes\r\n        \r\n    Returns:\r\n        Appropriate transformer class for the resolution\r\n    \r\n    Raises:\r\n        ValueError: If resolution is invalid or unsupported\r\n    \"\"\"\r\n    if resolution_minutes <= 0:\r\n        raise ValueError(\"Resolution must be positive\")\r\n    \r\n    if resolution_minutes <= 60:\r\n        return SubhourlyTransformer\r\n    elif resolution_minutes <= 180:\r\n        return HourlyTransformer\r\n    elif resolution_minutes <= 2880:  # Up to 2 days\r\n        return DailyTransformer\r\n    else:\r\n        return MonthlyTransformer\r\n\r\ndef create_resolution_transformer(\r\n    resolution_minutes: int,\r\n    config: dict\r\n) -> BaseResolutionTransformer:\r\n    \"\"\"\r\n    Create a transformer instance appropriate for the given resolution.\r\n    \r\n    Args:\r\n        resolution_minutes: The desired forecast resolution in minutes\r\n        config: Configuration dictionary for the transformer\r\n        \r\n    Returns:\r\n        Configured transformer instance\r\n    \"\"\"\r\n    transformer_class = get_transformer_for_resolution(resolution_minutes)\r\n    return transformer_class(config)\r\n\r\n__all__ = [\r\n    'BaseResolutionTransformer',\r\n    'SubhourlyTransformer',\r\n    'HourlyTransformer',\r\n    'DailyTransformer',\r\n    'MonthlyTransformer',\r\n    'get_transformer_for_resolution',\r\n    'create_resolution_transformer'\r\n]"
        }
    ]
}