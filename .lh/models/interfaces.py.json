{
    "sourceFile": "models/interfaces.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733182208759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733182208759,
            "name": "Commit-0",
            "content": "# models/interfaces.py\r\n\"\"\"Core interfaces and types for the model system.\"\"\"\r\nfrom abc import ABC, abstractmethod\r\nfrom typing import Any, Optional, Tuple, Union\r\nimport torch\r\nfrom torch.utils.data import Dataset\r\n\r\nfrom training.reports.training_report import TrainingReport\r\n\r\n\r\nclass ModelInterface(ABC):\r\n    \"\"\"Base interface for all models.\"\"\"\r\n    @abstractmethod\r\n    def forward(self, *args: Any, **kwargs: Any) -> torch.Tensor:\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_input_dims(self) -> int:\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_output_dims(self) -> int:\r\n        pass\r\n\r\n\r\nclass WrapperInterface(ABC):\r\n    \"\"\"Base interface for model wrappers.\"\"\"\r\n    @abstractmethod\r\n    def train(\r\n            self,\r\n            train_dataset: Dataset[Any],\r\n            validation_dataset: Optional[Dataset[Any]] = None\r\n    ) -> TrainingReport:\r\n        \"\"\"Train the model.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def training_step(\r\n            self,\r\n            batch_input: Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]],\r\n            batch_target: torch.Tensor\r\n    ) -> float:\r\n        \"\"\"Perform a single training step and return loss.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def validation_step(\r\n            self,\r\n            batch_input: Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]],\r\n            batch_target: torch.Tensor\r\n    ) -> float:\r\n        \"\"\"Perform a single validation step and return loss.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def predict(self, dataset: Dataset[Any]) -> Tuple[torch.Tensor, torch.Tensor]:\r\n        \"\"\"Make predictions using the model.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def save(self, path: str) -> None:\r\n        \"\"\"Save model state.\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def load(self, path: str) -> None:\r\n        \"\"\"Load model state.\"\"\"\r\n        pass\r\n"
        }
    ]
}