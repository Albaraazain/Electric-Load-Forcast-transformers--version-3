{
    "sourceFile": "models/losses/custom_losses.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733003883282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733003883282,
            "name": "Commit-0",
            "content": "# models/losses/custom_losses.py\r\nimport torch\r\nfrom torch import nn, Tensor\r\nfrom typing import Dict, List\r\n\r\nclass MAPE(nn.Module):\r\n    \"\"\"Mean Absolute Percentage Error loss.\"\"\"\r\n\r\n    def __init__(self, eps: float = 1e-8):\r\n        super().__init__()\r\n        self.eps = eps\r\n\r\n    def forward(self, pred: Tensor, target: Tensor) -> Tensor:\r\n        \"\"\"\r\n        Calculate MAPE loss.\r\n\r\n        Args:\r\n            pred: Predicted values\r\n            target: Target values\r\n\r\n        Returns:\r\n            MAPE loss value\r\n        \"\"\"\r\n        return torch.mean(\r\n            torch.abs(\r\n                (target - pred) / (torch.abs(target) + self.eps)\r\n            )\r\n        ) * 100\r\n\r\nclass RobustMSELoss(nn.Module):\r\n    \"\"\"MSE loss with outlier handling.\"\"\"\r\n    \r\n    def __init__(self, beta: float = 1.0):\r\n        super().__init__()\r\n        self.beta = beta\r\n        \r\n    def forward(self, pred: Tensor, target: Tensor) -> Tensor:\r\n        \"\"\"\r\n        Compute Huber-like loss that's more robust to outliers.\r\n        \"\"\"\r\n        diff = target - pred\r\n        loss = torch.where(\r\n            torch.abs(diff) < self.beta,\r\n            0.5 * diff ** 2,\r\n            self.beta * torch.abs(diff) - 0.5 * self.beta ** 2\r\n        )\r\n        return torch.mean(loss)\r\n\r\nclass CombinedLoss(nn.Module):\r\n    \"\"\"Combination of multiple loss functions with weights.\"\"\"\r\n\r\n    def __init__(self, losses: Dict[nn.Module, float]):\r\n        \"\"\"\r\n        Args:\r\n            losses: Dictionary mapping loss functions to their weights\r\n        \"\"\"\r\n        super().__init__()\r\n        self.losses = losses\r\n\r\n    def forward(self, pred: Tensor, target: Tensor) -> Tensor:\r\n        \"\"\"\r\n        Calculate combined loss.\r\n\r\n        Args:\r\n            pred: Predicted values\r\n            target: Target values\r\n\r\n        Returns:\r\n            Weighted sum of all losses\r\n        \"\"\"\r\n        total_loss = 0.0\r\n        for loss_fn, weight in self.losses.items():\r\n            total_loss += weight * loss_fn(pred, target)\r\n        return torch.tensor(total_loss, device=pred.device)"
        }
    ]
}