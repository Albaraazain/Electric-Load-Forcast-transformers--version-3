{
    "sourceFile": "models/registry/model_registry.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733179517688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733179646066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,33 @@\n-\r\n-from typing import Dict, Type\r\n+from typing import Dict, Type, Any\r\n from models.base.base_model import BaseModel\r\n from models.registry.model_types import ModelType\r\n+from models.registry.base_registry import BaseModelRegistry\r\n \r\n-class ModelRegistry:\r\n+class ModelRegistry(BaseModelRegistry):\r\n     \"\"\"Central registry for model types.\"\"\"\r\n+    _instance = None\r\n     _registry: Dict[ModelType, Type[BaseModel]] = {}\r\n \r\n-    @classmethod\r\n-    def register(cls, model_type: ModelType, model_class: Type[BaseModel]) -> None:\r\n+    def __new__(cls):\r\n+        if cls._instance is None:\r\n+            cls._instance = super().__new__(cls)\r\n+        return cls._instance\r\n+\r\n+    def register_model(self, model_type: ModelType, model_class: Type[BaseModel]) -> None:\r\n         \"\"\"Register a model class for a specific model type.\"\"\"\r\n-        cls._registry[model_type] = model_class\r\n+        self._registry[model_type] = model_class\r\n \r\n\\ No newline at end of file\n-    @classmethod\r\n-    def get_model_class(cls, model_type: ModelType) -> Type[BaseModel]:\r\n+    def get_model_class(self, model_type: ModelType) -> Type[BaseModel]:\r\n         \"\"\"Get the registered model class for a model type.\"\"\"\r\n-        if model_type not in cls._registry:\r\n+        if model_type not in self._registry:\r\n             raise ValueError(f\"No model registered for type: {model_type}\")\r\n-        return cls._registry[model_type]\r\n+        return self._registry[model_type]\r\n \r\n-    @classmethod\r\n-    def get_registered_models(cls) -> Dict[ModelType, Type[BaseModel]]:\r\n+    def create_model(self, model_type: ModelType, config: Dict[str, Any]) -> BaseModel:\r\n+        \"\"\"Create a model instance.\"\"\"\r\n+        model_class = self.get_model_class(model_type)\r\n+        return model_class(config)\r\n+\r\n+    def get_registered_models(self) -> Dict[ModelType, Type[BaseModel]]:\r\n         \"\"\"Get all registered model types.\"\"\"\r\n-        return cls._registry.copy()\n+        return self._registry.copy()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733183484005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,97 @@\n+# models/registry/model_registry.py\r\n from typing import Dict, Type, Any\r\n+import logging\r\n from models.base.base_model import BaseModel\r\n from models.registry.model_types import ModelType\r\n from models.registry.base_registry import BaseModelRegistry\r\n \r\n class ModelRegistry(BaseModelRegistry):\r\n-    \"\"\"Central registry for model types.\"\"\"\r\n+    \"\"\"\r\n+    Central registry for model types implementing the Singleton pattern.\r\n+    This class maintains a single source of truth for model registration.\r\n+    \"\"\"\r\n+    # Singleton instance\r\n     _instance = None\r\n+    \r\n+    # Registry storage\r\n     _registry: Dict[ModelType, Type[BaseModel]] = {}\r\n-\r\n+    \r\n     def __new__(cls):\r\n+        \"\"\"Ensure only one instance exists using Singleton pattern.\"\"\"\r\n         if cls._instance is None:\r\n             cls._instance = super().__new__(cls)\r\n+            # Initialize logging\r\n+            logging.basicConfig(level=logging.INFO)\r\n+            cls._instance._logger = logging.getLogger(__name__)\r\n         return cls._instance\r\n \r\n     def register_model(self, model_type: ModelType, model_class: Type[BaseModel]) -> None:\r\n-        \"\"\"Register a model class for a specific model type.\"\"\"\r\n+        \"\"\"\r\n+        Register a model class for a specific model type with validation.\r\n\\ No newline at end of file\n+        \r\n+        Args:\r\n+            model_type: Type identifier for the model\r\n+            model_class: The model class to register\r\n+            \r\n+        Raises:\r\n+            TypeError: If model_class doesn't inherit from BaseModel\r\n+            ValueError: If model_type is already registered\r\n+        \"\"\"\r\n+        # Validate model class inheritance\r\n+        if not issubclass(model_class, BaseModel):\r\n+            raise TypeError(f\"Model class {model_class.__name__} must inherit from BaseModel\")\r\n+            \r\n+        # Check for duplicate registration\r\n+        if model_type in self._registry:\r\n+            self._logger.warning(f\"Model type {model_type} is being re-registered\")\r\n+            \r\n+        # Register the model\r\n         self._registry[model_type] = model_class\r\n+        self._logger.info(f\"Registered model {model_class.__name__} for type {model_type}\")\r\n \r\n     def get_model_class(self, model_type: ModelType) -> Type[BaseModel]:\r\n-        \"\"\"Get the registered model class for a model type.\"\"\"\r\n+        \"\"\"\r\n+        Get the registered model class for a model type.\r\n+        \r\n+        Args:\r\n+            model_type: Type of model to retrieve\r\n+            \r\n+        Returns:\r\n+            Registered model class\r\n+            \r\n+        Raises:\r\n+            ValueError: If model type is not registered\r\n+        \"\"\"\r\n         if model_type not in self._registry:\r\n-            raise ValueError(f\"No model registered for type: {model_type}\")\r\n+            available_types = list(self._registry.keys())\r\n+            raise ValueError(\r\n+                f\"No model registered for type: {model_type}. \"\r\n+                f\"Available types: {available_types}\"\r\n+            )\r\n         return self._registry[model_type]\r\n \r\n     def create_model(self, model_type: ModelType, config: Dict[str, Any]) -> BaseModel:\r\n-        \"\"\"Create a model instance.\"\"\"\r\n-        model_class = self.get_model_class(model_type)\r\n-        return model_class(config)\r\n+        \"\"\"\r\n+        Create and initialize a model instance.\r\n+        \r\n+        Args:\r\n+            model_type: Type of model to create\r\n+            config: Configuration for model initialization\r\n+            \r\n+        Returns:\r\n+            Initialized model instance\r\n+            \r\n+        Raises:\r\n+            ValueError: If model creation fails\r\n+        \"\"\"\r\n+        try:\r\n+            model_class = self.get_model_class(model_type)\r\n+            model = model_class(config)\r\n+            self._logger.info(f\"Created model instance of type {model_type}\")\r\n+            return model\r\n+        except Exception as e:\r\n+            raise ValueError(f\"Failed to create model of type {model_type}: {str(e)}\") from e\r\n \r\n     def get_registered_models(self) -> Dict[ModelType, Type[BaseModel]]:\r\n-        \"\"\"Get all registered model types.\"\"\"\r\n-        return self._registry.copy()\n+        \"\"\"Get a copy of the registry mapping.\"\"\"\r\n+        return self._registry.copy()\r\n"
                },
                {
                    "date": 1733183511502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,16 @@\n     def __new__(cls):\r\n         \"\"\"Ensure only one instance exists using Singleton pattern.\"\"\"\r\n         if cls._instance is None:\r\n             cls._instance = super().__new__(cls)\r\n+        return cls._instance\r\n+\r\n+    def __init__(self):\r\n+        \"\"\"Initialize instance attributes.\"\"\"\r\n+        if not hasattr(self, '_logger'):\r\n             # Initialize logging\r\n             logging.basicConfig(level=logging.INFO)\r\n-            cls._instance._logger = logging.getLogger(__name__)\r\n-        return cls._instance\r\n+            self._logger = logging.getLogger(__name__)\r\n \r\n     def register_model(self, model_type: ModelType, model_class: Type[BaseModel]) -> None:\r\n         \"\"\"\r\n         Register a model class for a specific model type with validation.\r\n@@ -93,5 +97,5 @@\n             raise ValueError(f\"Failed to create model of type {model_type}: {str(e)}\") from e\r\n \r\n     def get_registered_models(self) -> Dict[ModelType, Type[BaseModel]]:\r\n         \"\"\"Get a copy of the registry mapping.\"\"\"\r\n-        return self._registry.copy()\n\\ No newline at end of file\n+        return self._registry.copy()\r\n"
                }
            ],
            "date": 1733179517688,
            "name": "Commit-0",
            "content": "\r\nfrom typing import Dict, Type\r\nfrom models.base.base_model import BaseModel\r\nfrom models.registry.model_types import ModelType\r\n\r\nclass ModelRegistry:\r\n    \"\"\"Central registry for model types.\"\"\"\r\n    _registry: Dict[ModelType, Type[BaseModel]] = {}\r\n\r\n    @classmethod\r\n    def register(cls, model_type: ModelType, model_class: Type[BaseModel]) -> None:\r\n        \"\"\"Register a model class for a specific model type.\"\"\"\r\n        cls._registry[model_type] = model_class\r\n\r\n    @classmethod\r\n    def get_model_class(cls, model_type: ModelType) -> Type[BaseModel]:\r\n        \"\"\"Get the registered model class for a model type.\"\"\"\r\n        if model_type not in cls._registry:\r\n            raise ValueError(f\"No model registered for type: {model_type}\")\r\n        return cls._registry[model_type]\r\n\r\n    @classmethod\r\n    def get_registered_models(cls) -> Dict[ModelType, Type[BaseModel]]:\r\n        \"\"\"Get all registered model types.\"\"\"\r\n        return cls._registry.copy()"
        }
    ]
}