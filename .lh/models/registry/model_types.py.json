{
    "sourceFile": "models/registry/model_types.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1733091644623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733091651550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     @property\r\n     def is_transformer(self) -> bool:\r\n         \"\"\"Check if model type is a transformer variant.\"\"\"\r\n         return self in {\r\n+            self.TIME_SERIES_TRANSFORMER,  # Add this\r\n             self.VANILLA_TRANSFORMER,\r\n             self.CONV_TRANSFORMER,\r\n             self.INFORMER\r\n         }\r\n"
                },
                {
                    "date": 1733091658544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,7 @@\n \r\n def initialize_model_registry():\r\n     \"\"\"Initialize the model registry by importing all model implementations.\"\"\"\r\n     from models.architectures.transformers.vanilla_transformer import VanillaTransformer\r\n-    # Add other model imports here as needed\n\\ No newline at end of file\n+    from models.architectures.transformers.timeseries_transformer import TimeSeriesTransformer  # Add this\r\n+    from models.architectures.transformers.conv_transformer import ConvolutionalTransformer\r\n+    from models.architectures.transformers.informer import Informer\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733172431089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,14 @@\n     SIMPLE_NEURAL_NET = auto()\r\n     VANILLA_TRANSFORMER = auto()\r\n     CONV_TRANSFORMER = auto()\r\n     INFORMER = auto()\r\n+    # Add resolution-specific transformer types\r\n+    SUBHOURLY_TRANSFORMER = auto()\r\n+    HOURLY_TRANSFORMER = auto()\r\n+    DAILY_TRANSFORMER = auto()\r\n+    MONTHLY_TRANSFORMER = auto()\r\n \r\n-\r\n     @property\r\n     def is_transformer(self) -> bool:\r\n         \"\"\"Check if model type is a transformer variant.\"\"\"\r\n         return self in {\r\n"
                },
                {
                    "date": 1733176653665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,22 @@\n # models/registry/model_types.py\r\n from enum import Enum, auto\r\n+from typing import Optional\r\n \r\n-class ModelType(Enum):  # Fixed syntax error\r\n+class ModelType(Enum):\r\n     \"\"\"Enumeration of available model types.\"\"\"\r\n-\r\n-    TIME_SERIES_TRANSFORMER = auto()\r\n+    \r\n+    # Base model types\r\n     LINEAR_REGRESSION = auto()\r\n     SIMPLE_NEURAL_NET = auto()\r\n+    \r\n+    # Standard transformer variants\r\n     VANILLA_TRANSFORMER = auto()\r\n     CONV_TRANSFORMER = auto()\r\n     INFORMER = auto()\r\n-    # Add resolution-specific transformer types\r\n+    TIME_SERIES_TRANSFORMER = auto()\r\n+    \r\n+    # Resolution-specific transformers\r\n     SUBHOURLY_TRANSFORMER = auto()\r\n     HOURLY_TRANSFORMER = auto()\r\n     DAILY_TRANSFORMER = auto()\r\n     MONTHLY_TRANSFORMER = auto()\r\n@@ -19,26 +24,60 @@\n     @property\r\n     def is_transformer(self) -> bool:\r\n         \"\"\"Check if model type is a transformer variant.\"\"\"\r\n         return self in {\r\n-            self.TIME_SERIES_TRANSFORMER,  # Add this\r\n+            self.TIME_SERIES_TRANSFORMER,\r\n             self.VANILLA_TRANSFORMER,\r\n             self.CONV_TRANSFORMER,\r\n-            self.INFORMER\r\n+            self.INFORMER,\r\n+            self.SUBHOURLY_TRANSFORMER,\r\n+            self.HOURLY_TRANSFORMER,\r\n+            self.DAILY_TRANSFORMER,\r\n+            self.MONTHLY_TRANSFORMER\r\n         }\r\n \r\n     @property\r\n     def is_neural_net(self) -> bool:\r\n         \"\"\"Check if model type is a neural network.\"\"\"\r\n+        return self.is_transformer or self == self.SIMPLE_NEURAL_NET\r\n+\r\n+    @property\r\n+    def is_resolution_specific(self) -> bool:\r\n+        \"\"\"Check if model type is resolution-specific.\"\"\"\r\n         return self in {\r\n-            self.SIMPLE_NEURAL_NET,\r\n\\ No newline at end of file\n-            self.VANILLA_TRANSFORMER,\r\n-            self.CONV_TRANSFORMER,\r\n-            self.INFORMER\r\n+            self.SUBHOURLY_TRANSFORMER,\r\n+            self.HOURLY_TRANSFORMER,\r\n+            self.DAILY_TRANSFORMER,\r\n+            self.MONTHLY_TRANSFORMER\r\n         }\r\n \r\n+    @classmethod\r\n+    def get_for_resolution(cls, resolution_minutes: int) -> 'ModelType':\r\n+        \"\"\"Get appropriate transformer type for given resolution.\"\"\"\r\n+        if resolution_minutes <= 15:\r\n+            return cls.SUBHOURLY_TRANSFORMER\r\n+        elif resolution_minutes <= 60:\r\n+            return cls.HOURLY_TRANSFORMER\r\n+        elif resolution_minutes <= 1440:\r\n+            return cls.DAILY_TRANSFORMER\r\n+        else:\r\n+            return cls.MONTHLY_TRANSFORMER\r\n+\r\n def initialize_model_registry():\r\n     \"\"\"Initialize the model registry by importing all model implementations.\"\"\"\r\n+    # Standard models\r\n+    from models.architectures.linear.linear_regression import LinearRegression\r\n+    from models.architectures.neural_nets.simple_nn import SimpleNeuralNet\r\n+    \r\n+    # Standard transformers\r\n     from models.architectures.transformers.vanilla_transformer import VanillaTransformer\r\n-    from models.architectures.transformers.timeseries_transformer import TimeSeriesTransformer  # Add this\r\n+    from models.architectures.transformers.timeseries_transformer import TimeSeriesTransformer\r\n     from models.architectures.transformers.conv_transformer import ConvolutionalTransformer\r\n-    from models.architectures.transformers.informer import Informer\n+    from models.architectures.transformers.informer import Informer\r\n+    \r\n+    # Resolution-specific transformers\r\n+    from models.architectures.transformers.resolution_specific import (\r\n+        SubhourlyTransformer,\r\n+        HourlyTransformer,\r\n+        DailyTransformer,\r\n+        MonthlyTransformer\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733180517859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,20 @@\n             return cls.DAILY_TRANSFORMER\r\n         else:\r\n             return cls.MONTHLY_TRANSFORMER\r\n \r\n+    @classmethod\r\n+    def from_string(cls, name: str) -> 'ModelType':\r\n+        \"\"\"Convert string to ModelType.\"\"\"\r\n+        try:\r\n+            return cls[name]\r\n+        except KeyError:\r\n+            raise ValueError(f\"Unknown model type: {name}\")\r\n+\r\n+    def __str__(self) -> str:\r\n+        \"\"\"String representation of the enum.\"\"\"\r\n+        return self.name\r\n+\r\n def initialize_model_registry():\r\n     \"\"\"Initialize the model registry by importing all model implementations.\"\"\"\r\n     # Standard models\r\n     from models.architectures.linear.linear_regression import LinearRegression\r\n"
                }
            ],
            "date": 1733091644623,
            "name": "Commit-0",
            "content": "# models/registry/model_types.py\r\nfrom enum import Enum, auto\r\n\r\nclass ModelType(Enum):  # Fixed syntax error\r\n    \"\"\"Enumeration of available model types.\"\"\"\r\n\r\n    TIME_SERIES_TRANSFORMER = auto()\r\n    LINEAR_REGRESSION = auto()\r\n    SIMPLE_NEURAL_NET = auto()\r\n    VANILLA_TRANSFORMER = auto()\r\n    CONV_TRANSFORMER = auto()\r\n    INFORMER = auto()\r\n\r\n\r\n    @property\r\n    def is_transformer(self) -> bool:\r\n        \"\"\"Check if model type is a transformer variant.\"\"\"\r\n        return self in {\r\n            self.VANILLA_TRANSFORMER,\r\n            self.CONV_TRANSFORMER,\r\n            self.INFORMER\r\n        }\r\n\r\n    @property\r\n    def is_neural_net(self) -> bool:\r\n        \"\"\"Check if model type is a neural network.\"\"\"\r\n        return self in {\r\n            self.SIMPLE_NEURAL_NET,\r\n            self.VANILLA_TRANSFORMER,\r\n            self.CONV_TRANSFORMER,\r\n            self.INFORMER\r\n        }\r\n\r\ndef initialize_model_registry():\r\n    \"\"\"Initialize the model registry by importing all model implementations.\"\"\"\r\n    from models.architectures.transformers.vanilla_transformer import VanillaTransformer\r\n    # Add other model imports here as needed"
        }
    ]
}