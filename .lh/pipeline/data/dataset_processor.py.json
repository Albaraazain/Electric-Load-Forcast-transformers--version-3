{
    "sourceFile": "pipeline/data/dataset_processor.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733066459090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733066459090,
            "name": "Commit-0",
            "content": "\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom datetime import datetime\r\nimport holidays\r\n\r\nclass DatasetProcessor:\r\n    # ...existing code...\r\n    \r\n    def add_cyclical_time_features(self, df: pd.DataFrame) -> pd.DataFrame:\r\n        \"\"\"Add cyclical time features (hour of day, day of week, month).\"\"\"\r\n        timestamp = pd.to_datetime(df[self.config.time_variable])\r\n        \r\n        # Hour of day\r\n        df['hour_sin'] = np.sin(2 * np.pi * timestamp.dt.hour / 24)\r\n        df['hour_cos'] = np.cos(2 * np.pi * timestamp.dt.hour / 24)\r\n        \r\n        # Day of week\r\n        df['dow_sin'] = np.sin(2 * np.pi * timestamp.dt.dayofweek / 7)\r\n        df['dow_cos'] = np.cos(2 * np.pi * timestamp.dt.dayofweek / 7)\r\n        \r\n        # Month\r\n        df['month_sin'] = np.sin(2 * np.pi * timestamp.dt.month / 12)\r\n        df['month_cos'] = np.cos(2 * np.pi * timestamp.dt.month / 12)\r\n        \r\n        return df\r\n\r\n    def add_holiday_features(self, df: pd.DataFrame) -> pd.DataFrame:\r\n        \"\"\"Add holiday indicators.\"\"\"\r\n        us_holidays = holidays.US()  # You can change this to your country\r\n        timestamp = pd.to_datetime(df[self.config.time_variable])\r\n        \r\n        df['is_holiday'] = timestamp.map(lambda x: x in us_holidays).astype(int)\r\n        df['is_weekend'] = timestamp.dt.dayofweek.isin([5, 6]).astype(int)\r\n        \r\n        return df\r\n\r\n    def process_dataset(self, df: pd.DataFrame) -> pd.DataFrame:\r\n        \"\"\"Process the dataset with all configured features.\"\"\"\r\n        if self.config.add_time_features:\r\n            df = self.add_cyclical_time_features(df)\r\n            \r\n        if self.config.add_holiday_features:\r\n            df = self.add_holiday_features(df)\r\n            \r\n        if self.config.add_weather_features and self.config.weather_variables:\r\n            # Assume weather features are already in the dataset\r\n            # Just ensure they're properly scaled\r\n            weather_cols = self.config.weather_variables\r\n            if not all(col in df.columns for col in weather_cols):\r\n                raise ValueError(f\"Weather features {weather_cols} not found in dataset\")\r\n        \r\n        # ...existing processing code...\r\n        \r\n        return df"
        }
    ]
}