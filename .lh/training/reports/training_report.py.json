{
    "sourceFile": "training/reports/training_report.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733178689956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733181354177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,19 @@\n         val_losses: Optional[List[float]] = None,\r\n         learning_rates: Optional[List[float]] = None,\r\n         epochs: Optional[int] = None,\r\n         early_stopping_epoch: Optional[int] = None,\r\n-        additional_metrics: Optional[Dict[str, List[float]]] = None\r\n+        additional_metrics: Optional[Dict[str, List[float]]] = None,\r\n+        metrics: Optional[Dict[str, Any]] = None  # Add for backward compatibility\r\n     ):\r\n         self.train_losses = train_losses\r\n         self.val_losses = val_losses if val_losses is not None else []\r\n         self.learning_rates = learning_rates if learning_rates is not None else []\r\n         self.epochs = epochs\r\n         self.early_stopping_epoch = early_stopping_epoch\r\n         self.additional_metrics = additional_metrics if additional_metrics is not None else {}\r\n+        if metrics:\r\n+            self.additional_metrics.update(metrics)\r\n \r\n     def add_loss(self, train_loss: float, val_loss: Optional[float] = None, lr: Optional[float] = None) -> None:\r\n         self.train_losses.append(train_loss)\r\n         if val_loss is not None:\r\n"
                }
            ],
            "date": 1733178689956,
            "name": "Commit-0",
            "content": "from typing import List, Dict, Any, Optional\r\nimport numpy as np\r\n\r\nclass TrainingReport:\r\n    def __init__(\r\n        self,\r\n        train_losses: List[float],\r\n        val_losses: Optional[List[float]] = None,\r\n        learning_rates: Optional[List[float]] = None,\r\n        epochs: Optional[int] = None,\r\n        early_stopping_epoch: Optional[int] = None,\r\n        additional_metrics: Optional[Dict[str, List[float]]] = None\r\n    ):\r\n        self.train_losses = train_losses\r\n        self.val_losses = val_losses if val_losses is not None else []\r\n        self.learning_rates = learning_rates if learning_rates is not None else []\r\n        self.epochs = epochs\r\n        self.early_stopping_epoch = early_stopping_epoch\r\n        self.additional_metrics = additional_metrics if additional_metrics is not None else {}\r\n\r\n    def add_loss(self, train_loss: float, val_loss: Optional[float] = None, lr: Optional[float] = None) -> None:\r\n        self.train_losses.append(train_loss)\r\n        if val_loss is not None:\r\n            self.val_losses.append(val_loss)\r\n        if lr is not None:\r\n            self.learning_rates.append(lr)\r\n\r\n    def add_metric(self, name: str, value: float) -> None:\r\n        if name not in self.additional_metrics:\r\n            self.additional_metrics[name] = []\r\n        self.additional_metrics[name].append(value)\r\n\r\n    def get_best_epoch(self, monitor: str = 'val_loss') -> int:\r\n        if monitor == 'val_loss' and self.val_losses:\r\n            return int(np.argmin(self.val_losses))\r\n        return int(np.argmin(self.train_losses))\r\n\r\n    def serialize(self) -> Dict[str, Any]:\r\n        return {\r\n            'train_losses': self.train_losses,\r\n            'val_losses': self.val_losses,\r\n            'learning_rates': self.learning_rates,\r\n            'epochs': self.epochs,\r\n            'early_stopping_epoch': self.early_stopping_epoch,\r\n            'additional_metrics': self.additional_metrics\r\n        }\r\n\r\n    @staticmethod\r\n    def deserialize(data: Optional[Dict]) -> Optional['TrainingReport']:\r\n        if data is None:\r\n            return None\r\n        return TrainingReport(\r\n            train_losses=data['train_losses'],\r\n            val_losses=data.get('val_losses'),\r\n            learning_rates=data.get('learning_rates'),\r\n            epochs=data.get('epochs'),\r\n            early_stopping_epoch=data.get('early_stopping_epoch'),\r\n            additional_metrics=data.get('additional_metrics')\r\n        )\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Optional[Dict[str, Any]]) -> Optional['TrainingReport']:\r\n        \"\"\"\r\n        Creates a TrainingReport instance from dictionary data.\r\n        Args:\r\n            data: Dictionary containing training report data or None\r\n        Returns:\r\n            TrainingReport instance or None if data is None\r\n        \"\"\"\r\n        if data is None:\r\n            return None\r\n            \r\n        return cls(\r\n            train_losses=data['train_losses'],\r\n            val_losses=data.get('val_losses'),\r\n            learning_rates=data.get('learning_rates'),\r\n            epochs=data.get('epochs'),\r\n            early_stopping_epoch=data.get('early_stopping_epoch'),\r\n            additional_metrics=data.get('additional_metrics')\r\n        )\r\n\r\n    def __str__(self) -> str:\r\n        return (\r\n            f\"Training Report:\\n\"\r\n            f\"Epochs: {self.epochs}\\n\"\r\n            f\"Final train loss: {self.train_losses[-1] if self.train_losses else 'N/A'}\\n\"\r\n            f\"Final val loss: {self.val_losses[-1] if self.val_losses else 'N/A'}\\n\"\r\n            f\"Early stopping epoch: {self.early_stopping_epoch if self.early_stopping_epoch else 'N/A'}\"\r\n        )"
        }
    ]
}