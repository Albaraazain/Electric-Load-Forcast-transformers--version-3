{
    "sourceFile": "utils/logging/logger.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733246335720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733246335720,
            "name": "Commit-0",
            "content": "# utils/logging/logger.py\r\nimport logging\r\nimport sys\r\nfrom pathlib import Path\r\nfrom typing import Dict, Optional, Union\r\n\r\nfrom .config import LoggerConfig, LogLevel\r\nfrom .formatters import JSONFormatter\r\nfrom .handlers import RotatingFileHandler, ComponentHandler\r\n\r\nclass Logger:\r\n    \"\"\"Main logger class with component-based configuration.\"\"\"\r\n    \r\n    _instances: Dict[str, 'Logger'] = {}\r\n    \r\n    @classmethod\r\n    def get_logger(cls, name: str, config: Optional[LoggerConfig] = None) -> 'Logger':\r\n        \"\"\"Get or create a logger instance.\"\"\"\r\n        if name not in cls._instances:\r\n            cls._instances[name] = cls(name, config or LoggerConfig())\r\n        return cls._instances[name]\r\n\r\n    def __init__(self, name: str, config: LoggerConfig):\r\n        \"\"\"Initialize logger with configuration.\"\"\"\r\n        self.logger = logging.getLogger(name)\r\n        self.config = config\r\n        self.setup_logger()\r\n\r\n    def setup_logger(self) -> None:\r\n        \"\"\"Configure logger with handlers and formatting.\"\"\"\r\n        self.logger.setLevel(self.config.level.value)\r\n        self.logger.handlers.clear()\r\n\r\n        # Create formatter\r\n        if self.config.json_output:\r\n            formatter = JSONFormatter()\r\n        else:\r\n            format_parts = []\r\n            if self.config.include_timestamp:\r\n                format_parts.append('%(asctime)s')\r\n            if self.config.include_level:\r\n                format_parts.append('%(levelname)s')\r\n            if self.config.include_module:\r\n                format_parts.append('%(module)s')\r\n            format_parts.append('[%(component)s] %(message)s')\r\n            \r\n            formatter = logging.Formatter(' - '.join(format_parts))\r\n\r\n        # Add console handler\r\n        console_handler = ComponentHandler(self.config.component_name)\r\n        console_handler.setFormatter(formatter)\r\n        self.logger.addHandler(console_handler)\r\n\r\n        # Add file handler if configured\r\n        if self.config.file_path:\r\n            file_handler = RotatingFileHandler(\r\n                str(self.config.file_path),\r\n                maxBytes=10*1024*1024,  # 10MB\r\n                backupCount=5\r\n            )\r\n            file_handler.setFormatter(formatter)\r\n            self.logger.addHandler(file_handler)\r\n\r\n    def set_level(self, level: Union[LogLevel, str]) -> None:\r\n        \"\"\"Change logging level.\"\"\"\r\n        if isinstance(level, str):\r\n            level = LogLevel[level]\r\n        self.config.level = level\r\n        self.logger.setLevel(level.value)\r\n\r\n    def debug(self, msg: str, extra: Optional[Dict] = None) -> None:\r\n        \"\"\"Log debug message.\"\"\"\r\n        self.logger.debug(msg, extra={\"extra_data\": extra} if extra else None)\r\n\r\n    def info(self, msg: str, extra: Optional[Dict] = None) -> None:\r\n        \"\"\"Log info message.\"\"\"\r\n        self.logger.info(msg, extra={\"extra_data\": extra} if extra else None)\r\n\r\n    def warning(self, msg: str, extra: Optional[Dict] = None) -> None:\r\n        \"\"\"Log warning message.\"\"\"\r\n        self.logger.warning(msg, extra={\"extra_data\": extra} if extra else None)\r\n\r\n    def error(self, msg: str, extra: Optional[Dict] = None) -> None:\r\n        \"\"\"Log error message.\"\"\"\r\n        self.logger.error(msg, extra={\"extra_data\": extra} if extra else None)\r\n\r\n    def critical(self, msg: str, extra: Optional[Dict] = None) -> None:\r\n        \"\"\"Log critical message.\"\"\"\r\n        self.logger.critical(msg, extra={\"extra_data\": extra} if extra else None)\r\n"
        }
    ]
}